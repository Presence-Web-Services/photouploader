#!/bin/bash

error() {
  echo "$1" >& 2
  echo "USAGE: webpic <input.jpg|.ppm|.png> <html/prefix> <dpr>[.]?d[<csswidth>w]?[<cssheight>h]? [<dpr>[.]?d[<csswidth>w]?[<cssheight>h]? ...]"
  echo "No '.' after dpr value means it will run for every integer from dpr to 1"
  exit 1
}

run_djpeg() {
  if [[ "$filename" =~ $jpg_re ]]; then
    uncompressed_filename="${BASH_REMATCH[1]}.ppm"
    djpeg -pnm -outfile "$uncompressed_filename" "$filename"
  else
    error "Could not run djpeg on file $filename"
  fi
  return 0
}

run_convert() {
  if [[ -z "$width" ]] && [[ -z "$height" ]]; then
    operation="-scale ${dpr}00%"
    dim_name="${dpr}d"
  elif [[ -n "$width" ]] && [[ -z "$height" ]]; then
    operation="-resize $(($dpr*$width))x"
    dim_name="${width}w${dpr}d"
  elif [[ -z "$width" ]] && [[ -n "$height" ]]; then
    operation="-resize x$(($dpr*$height))"
    dim_name="${height}h${dpr}d"
  elif [[ -n "$width" ]] && [[ -n "$height" ]]; then
    operation="-resize $(($dpr*$width))x$(($dpr*$height))"
    dim_name="${width}w${height}h${dpr}d"
  else
    error "Could not compute operation"
  fi
  echo "$uncompressed_filename: $operation"
  convert $operation -compress none "$uncompressed_filename" "$uncompressed_filename"
  return 0
}

run_cjpeg() {
  if [[ "$filename" =~ $filename_re ]]; then
    jpg_filename="${picture_dir}/${dim_name}.jpg"
    echo "Creating JPG: $jpg_filename"
    cjpeg -outfile "$jpg_filename" "$uncompressed_filename"
  else
    error "Could not generate jpg from uncompressed file $uncompressed_filename"
  fi
  return 0
}

run_pamtotiff() {
  if [[ "$uncompressed_filename" =~ $ppm_re ]]; then
    tiff_filename="${BASH_REMATCH[1]}.tiff"
    pamtotiff -truecolor "$uncompressed_filename" > "$tiff_filename" 2>/dev/null
  elif [[ ! "$uncompressed_filename" =~ $png_re ]]; then
    error "Could not generate tiff from uncompressed file $uncompressed_filename"
  fi
  return 0
}

run_cwebp() {
  if [[ "$filename" =~ $filename_re ]]; then
    webp_filename="${picture_dir}/${dim_name}.webp"
    echo "Creating WEBP: $webp_filename"
    if [[ "$uncompressed_filename" =~ $png_re ]]; then
      cwebp "$uncompressed_filename" -o "$webp_filename" 2>/dev/null
    else
      cwebp "$tiff_filename" -o "$webp_filename" 2>/dev/null
    fi
  else
    error "Could not generate webp from tiff or png file created from uncompressed file $uncompressed_filename"
  fi
  return 0
}

run_pngquant() {
  if [[ "$filename" =~ $filename_re ]]; then
    png_filename="${picture_dir}/${dim_name}.png"
    echo "Creating PNG: $png_filename"
    pngquant -o "$png_filename" "$uncompressed_filename"
  else
    error "Could not generate png from uncompressed file $uncompressed_filename"
  fi
  return 0
}

run_advpng() {
  if [[ "$png_filename" =~ $png_re ]]; then
    advpng -z "$png_filename" > /dev/null
  else
    error "Could not recompress png $png_filename"
  fi
  return 0
}

html_webp_start() {
  if [[ -n "$last" ]]; then
    html+=$'  <source type="image/webp" srcset="'
  else
    html+=$'  <source media="(min-width: )" type="image/webp" srcset="'
  fi
  return 0
}

html_webp_end() {
  html+=$'">\n'
  return 0
}

html_webp_separator() {
  if [[ "$dpr" -ne 1 ]] && [[ -z "$stop" ]]; then
    html+=", "
  fi
  return 0
}

html_webp_file() {
  html+="${picture_dir}$(basename $webp_filename)$(print_dpr)"
  return 0
}

html_jpg_png_start() {
  if [[ -n "$last" ]]; then
    html+=$'  <img src="'
  else
    html+=$'  <source media="(min-width: )" srcset="'
  fi
  return 0
}

html_jpg_png_separator() {
  if [[ "$dpr" -eq 2 ]] && [[ "$dpr" -ne "$max_dpr" ]] && [[ -z "$stop" ]] && [[ -n "$last" ]]; then
    html+=$'" srcset="'
  elif [[ "$dpr" -ne 1 ]] && [[ -z "$stop" ]]; then
    html+=", "
  fi
  return 0
}

html_jpg_png_file() {
  html+="${picture_dir}"
  if [[ "$uncompressed_filename" =~ $png_re ]]; then
    html+="$(basename $png_filename)"
  elif [[ "$uncompressed_filename" =~ $ppm_re ]]; then
    html+="$(basename $jpg_filename)"
  fi
  html+="$(print_dpr)"
  return 0
}

html_jpg_png_end() {
  if [[ -n "$last" ]]; then
    html+=$'" alt="" '
    if [[ -z "$width" ]]; then
      width="$height"
    fi
    if [[ -z "$height" ]]; then
      height="$width"
    fi
    html+="width=\"${width}\" height=\"${height}\""
    html+=$'>\n'
  else
    html+=$'">\n'
  fi
  return 0
}

print_dpr() {
  if [[ "$dpr" -ne 1 ]]; then
    echo " ${dpr}x"
  fi
  return 0
}

set_dpr() {
  if [[ -z "$stop" ]]; then
    dpr=1
  else
    dpr="$max_dpr"
  fi
  return 0
}

generate_uncompressed() {
  if [[ "$filename" =~ $jpg_re ]]; then
    run_djpeg
  elif [[ "$filename" =~ $ppm_re ]] || [[ "$filename" =~ $png_re ]]; then
    uncompressed_filename="${BASH_REMATCH[1]}_resize${BASH_REMATCH[2]}"
    cp "$filename" "$uncompressed_filename"
  fi
  return 0
}

cleanup_files() {
  rm "$uncompressed_filename"
  if [[ "$1" == "webp" ]] && [[ "$uncompressed_filename" =~ $ppm_re ]]; then
    rm "$tiff_filename"
  fi
  return 0;
}

generate_jpg_or_png() {
  if [[ "$uncompressed_filename" =~ $png_re ]]; then
    run_pngquant
    run_advpng
  elif [[ "$uncompressed_filename" =~ $ppm_re ]]; then
    run_cjpeg
  else
    error "Could not generate jpg or png from $uncompressed_filename"
  fi
  return 0;
}

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
  error "Printing usage"
fi

if [[ "$#" -lt 3 ]]; then
  error "You must enter 3 or more arguments"
fi

filename="$1"
html_prefix="$2"

png_re="^(.+)(\.png)\$"
jpg_re="^(.+)(\.(jpg|jpeg))\$"
ppm_re="^(.+)(\.ppm)\$"
filename_re="^(.+)\.[a-zA-Z]+\$"
dim_re="^([0-9])(\.)?d(([0-9]+)w)?(([0-9]+)h)?\$"

if [[ "$filename" =~ $png_re ]]; then
  #echo "Convert png to jpg? (y or n)"
  #read convert_to_jpg
  convert_to_jpg='n'
fi

if [[ "$filename" =~ $png_re ]] && [[ "$convert_to_jpg" == "y" ]]; then
  new_filename="${BASH_REMATCH[1]}.jpg"
  convert -compress none "$filename" "$new_filename"
fi

if [[ "$filename" =~ $filename_re ]]; then
  final_dir="${BASH_REMATCH[1]}"
fi

html=$'<picture>\n'

count=0
last=""
for var in "$@"; do
    count=$(($count+1))
    if [[ "$var" == "$filename" ]]; then
      continue
    fi
    if [[ "$var" == "$html_prefix" ]]; then
      picture_dir="./${html_prefix}/${final_dir}/"
      mkdir -p "$picture_dir"
      continue
    fi
    if [[ "$filename" =~ $png_re ]] && [[ "$convert_to_jpg" == "y" ]]; then
      filename="$new_filename"
    fi
    if [[ "$count" -eq "$#" ]]; then
      last="last"
    fi
    if [[ "$var" =~ $dim_re ]]; then
      max_dpr="${BASH_REMATCH[1]}"
      width="${BASH_REMATCH[4]}"
      height="${BASH_REMATCH[6]}"
      stop="${BASH_REMATCH[2]}"
      set_dpr
      html_webp_start
      while [[ "$dpr" -le "$max_dpr" ]]; do
        html_webp_separator
        generate_uncompressed
        run_convert
        run_pamtotiff
        run_cwebp
        html_webp_file
        cleanup_files "webp"
        dpr=$(($dpr+1))
      done
      html_webp_end
      set_dpr
      html_jpg_png_start
      while [[ "$dpr" -le "$max_dpr" ]]; do
        html_jpg_png_separator
        generate_uncompressed
        run_convert
        generate_jpg_or_png
        html_jpg_png_file
        cleanup_files
        dpr=$(($dpr+1))
      done
      html_jpg_png_end
    else
      error "Wrong input format: $var"
    fi
done
html+="</picture>"
echo "$html"

if [[ "$convert_to_jpg" == "y" ]]; then
  rm "$new_filename"
fi
